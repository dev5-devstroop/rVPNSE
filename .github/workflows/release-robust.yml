# RVPNSE Cross-Platform Release - Robust Build System
name: üöÄ Release RVPNSE (Robust)

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options: [patch, minor, major]

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  RUST_VERSION: '1.82.0'

jobs:
  # ============================================================================
  # üìã SETUP & VERSION MANAGEMENT
  # ============================================================================
  setup:
    name: üìã Setup Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      build_date: ${{ steps.version.outputs.build_date }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üè∑Ô∏è Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            CURRENT=$(grep '^version = ' Cargo.toml | sed 's/version = "//' | sed 's/"//')
            case "${{ github.event.inputs.release_type }}" in
              major) NEW=$(echo $CURRENT | awk -F. '{print ($1+1)".0.0"}') ;;
              minor) NEW=$(echo $CURRENT | awk -F. '{print $1"."($2+1)".0"}') ;;
              patch) NEW=$(echo $CURRENT | awk -F. '{print $1"."$2"."($3+1)}') ;;
            esac
            echo "version=v$NEW" >> $GITHUB_OUTPUT
            
            sed -i "s/version = \"$CURRENT\"/version = \"$NEW\"/" Cargo.toml
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add Cargo.toml
            git commit -m "üîñ Bump version to $NEW" || exit 0
            git tag "v$NEW"
            git push origin HEAD:${{ github.ref_name }}
            git push origin "v$NEW"
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
          
          echo "build_date=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      - name: üöÄ Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          gh release create "$VERSION" \
            --title "ü¶Ä RVPNSE $VERSION" \
            --notes "## üöÄ RVPNSE Release $VERSION
            
          ### üì¶ Platform Support
          | Platform | Architectures | Crypto | Status |
          |----------|-------------|--------|--------|
          | üêß **Linux** | x64 | Ring | ‚úÖ |
          | üçé **macOS** | x64, ARM64 | Ring | ‚úÖ |
          | ü™ü **Windows** | x64 | Ring | ‚úÖ |
          | ü§ñ **Android** | ARM64, ARMv7, x64, x86 | AWS-LC-RS | ‚úÖ |
          | üì± **iOS** | ARM64, Simulator | Ring | ‚úÖ |
          
          ### ‚ö° Features
          - ü¶Ä Production-ready Rust implementation
          - üîí Secure SoftEther SSL-VPN protocol  
          - üåç Cross-platform C FFI interface
          - ‚ö° High-performance cryptography
          - üì± Mobile-optimized builds
          
          Built on ${{ steps.version.outputs.build_date }}" \
            --draft=false

  # ============================================================================
  # üñ•Ô∏è DESKTOP BUILDS - Cross-Platform
  # ============================================================================
  build-desktop:
    name: üñ•Ô∏è ${{ matrix.name }}
    needs: setup
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { name: "Linux x64", os: ubuntu-latest, target: x86_64-unknown-linux-gnu, ext: so }
          - { name: "macOS x64", os: macos-latest, target: x86_64-apple-darwin, ext: dylib }
          - { name: "macOS ARM64", os: macos-latest, target: aarch64-apple-darwin, ext: dylib }
          - { name: "Windows x64", os: windows-latest, target: x86_64-pc-windows-msvc, ext: dll }
    
    steps:
      - uses: actions/checkout@v4

      - name: ü¶Ä Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: ${{ matrix.target }}

      - name: üì¶ Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: desktop-${{ matrix.target }}

      - name: üîß Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y build-essential pkg-config

      - name: üî® Build ${{ matrix.name }}
        shell: bash
        run: |
          echo "üî® Building ${{ matrix.name }}..."
          cargo build --target ${{ matrix.target }} --release --features ring-crypto
          
          mkdir -p dist
          
          # Platform-specific library handling
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Fix Windows DLL path - use proper filename
            cp target/${{ matrix.target }}/release/rvpnse.dll "dist/librvpnse-${{ matrix.name }}.dll"
          else
            cp target/${{ matrix.target }}/release/librvpnse.${{ matrix.ext }} "dist/librvpnse-${{ matrix.name }}.${{ matrix.ext }}"
          fi
          
          # Generate size info
          SIZE=$(ls -lh dist/ | tail -1 | awk '{print $5}')
          echo "‚úÖ Built ${{ matrix.name }} library ($SIZE)"

      - name: üì§ Upload ${{ matrix.name }}
        uses: actions/upload-artifact@v4
        with:
          name: desktop-${{ matrix.name }}
          path: dist/
          retention-days: 1

  # ============================================================================
  # ü§ñ ANDROID BUILDS - AWS-LC-RS for Enhanced Cross-Compilation
  # ============================================================================
  build-android:
    name: ü§ñ Android ${{ matrix.arch }}
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - { arch: ARM64, target: aarch64-linux-android, abi: arm64-v8a }
          - { arch: ARMv7, target: armv7-linux-androideabi, abi: armeabi-v7a }
          - { arch: x64, target: x86_64-linux-android, abi: x86_64 }
          - { arch: x86, target: i686-linux-android, abi: x86 }
    
    steps:
      - uses: actions/checkout@v4

      - name: ü¶Ä Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: ${{ matrix.target }}
          components: rustfmt

      - name: ü§ñ Setup Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25c

      - name: üîß Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential clang libclang-dev
          
          # Verify clang installation
          clang --version
          find /usr -name "libclang*.so*" 2>/dev/null | head -3

      - name: üì¶ Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: android-${{ matrix.target }}

      - name: üîß Configure Android environment
        run: |
          NDK_ROOT=${ANDROID_NDK_LATEST_HOME}
          echo "ANDROID_NDK_ROOT=$NDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=$NDK_ROOT" >> $GITHUB_ENV
          
          # Set cross-compilation environment for each target
          TARGET_UPPER=$(echo ${{ matrix.target }} | tr '[:lower:]-' '[:upper:]_')
          TOOLCHAIN_PREFIX="$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin"
          
          # Compiler and linker
          echo "CC_${{ matrix.target }}=$TOOLCHAIN_PREFIX/${{ matrix.target }}21-clang" >> $GITHUB_ENV
          echo "CXX_${{ matrix.target }}=$TOOLCHAIN_PREFIX/${{ matrix.target }}21-clang++" >> $GITHUB_ENV
          echo "CARGO_TARGET_${TARGET_UPPER}_LINKER=$TOOLCHAIN_PREFIX/${{ matrix.target }}21-clang" >> $GITHUB_ENV
          
          # Critical: Set AR tool for Ring/native builds
          echo "AR_${{ matrix.target }}=$TOOLCHAIN_PREFIX/llvm-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_${TARGET_UPPER}_AR=$TOOLCHAIN_PREFIX/llvm-ar" >> $GITHUB_ENV
          
          # Additional Android build tools
          echo "RANLIB_${{ matrix.target }}=$TOOLCHAIN_PREFIX/llvm-ranlib" >> $GITHUB_ENV
          echo "STRIP_${{ matrix.target }}=$TOOLCHAIN_PREFIX/llvm-strip" >> $GITHUB_ENV
          
          # Android-specific configuration
          echo "CMAKE_TOOLCHAIN_FILE=$NDK_ROOT/build/cmake/android.toolchain.cmake" >> $GITHUB_ENV
          echo "ANDROID_ABI=${{ matrix.abi }}" >> $GITHUB_ENV
          echo "ANDROID_API=21" >> $GITHUB_ENV
          
          # Critical: Configure bindgen for AWS-LC-RS
          SYSROOT="$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
          echo "BINDGEN_EXTRA_CLANG_ARGS=--sysroot=$SYSROOT" >> $GITHUB_ENV
          
          # Find libclang dynamically
          LIBCLANG_PATH=$(find /usr -name "libclang.so*" 2>/dev/null | head -1 | xargs dirname)
          if [ -z "$LIBCLANG_PATH" ]; then
            LIBCLANG_PATH="/usr/lib/x86_64-linux-gnu"
          fi
          echo "LIBCLANG_PATH=$LIBCLANG_PATH" >> $GITHUB_ENV
          
          # AWS-LC-RS specific settings to avoid host conflicts
          echo "AWS_LC_SYS_CMAKE_BUILDER=1" >> $GITHUB_ENV
          echo "AWS_LC_SYS_STATIC=1" >> $GITHUB_ENV
          
          # Try to use prebuilt bindings to avoid bindgen issues
          echo "AWS_LC_SYS_PREBUILT_BINDINGS=1" >> $GITHUB_ENV
          
          # Print environment for debugging
          echo "üîç Android build environment:"
          echo "  Target: ${{ matrix.target }}"
          echo "  NDK Root: $NDK_ROOT"
          echo "  AR Tool: $TOOLCHAIN_PREFIX/llvm-ar"
          echo "  LibClang: $LIBCLANG_PATH"

      - name: üî® Build Android ${{ matrix.arch }}
        run: |
          echo "üî® Building Android ${{ matrix.arch }} with AWS-LC-RS crypto..."
          
          # Use isolated target directory to prevent conflicts
          export CARGO_TARGET_DIR="target-android-${{ matrix.target }}"
          
          # Use AWS-LC-RS for Android (better cross-compilation support with proper environment)
          cargo build --target ${{ matrix.target }} --release --no-default-features --features aws-lc-crypto
          
          mkdir -p dist
          cp "target-android-${{ matrix.target }}/${{ matrix.target }}/release/librvpnse.so" "dist/librvpnse-android-${{ matrix.arch }}.so"
          
          SIZE=$(du -h "dist/librvpnse-android-${{ matrix.arch }}.so" | cut -f1)
          echo "‚úÖ Built Android ${{ matrix.arch }} library ($SIZE) with AWS-LC-RS crypto"

      - name: üîç Verify Android library
        run: |
          echo "üîç Verifying Android ${{ matrix.arch }} library..."
          LIB_FILE="dist/librvpnse-android-${{ matrix.arch }}.so"
          
          if [[ ! -f "$LIB_FILE" ]]; then
            echo "‚ùå Library file not found: $LIB_FILE"
            exit 1
          fi
          
          # Check file type and architecture
          file "$LIB_FILE"
          
          # Check for basic symbols
          if command -v nm >/dev/null 2>&1; then
            echo "üìã Checking exported symbols..."
            nm -D "$LIB_FILE" | grep -E "(rvpnse_|connection_)" | head -5 || echo "‚ö†Ô∏è No RVPNSE symbols found (this may be normal for static builds)"
          fi
          
          echo "‚úÖ Android ${{ matrix.arch }} library verified"

      - name: üì§ Upload Android ${{ matrix.arch }}
        uses: actions/upload-artifact@v4
        with:
          name: android-${{ matrix.arch }}
          path: dist/
          retention-days: 1

  # ============================================================================
  # üì± iOS UNIVERSAL FRAMEWORK - Handle Architecture Conflicts
  # ============================================================================
  build-ios:
    name: üì± iOS Universal
    needs: setup
    runs-on: macos-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: ü¶Ä Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: |
            aarch64-apple-ios
            x86_64-apple-ios

      - name: üì¶ Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ios-universal

      - name: üî® Build iOS targets
        run: |
          echo "üî® Building iOS universal framework..."
          
          # Build iOS device (ARM64)
          cargo build --target aarch64-apple-ios --release --features ring-crypto
          
          # Build iOS simulator (x86_64 only to avoid ARM64 conflict)
          cargo build --target x86_64-apple-ios --release --features ring-crypto

      - name: üì¶ Create iOS Framework
        run: |
          mkdir -p RVPNSEFramework.framework
          
          # Create universal binary (device ARM64 + simulator x86_64)
          lipo -create \
            target/aarch64-apple-ios/release/librvpnse.a \
            target/x86_64-apple-ios/release/librvpnse.a \
            -output RVPNSEFramework.framework/RVPNSEFramework
          
          # Add headers and metadata
          cp include/rvpnse.h RVPNSEFramework.framework/
          
          # Create Info.plist
          cat > RVPNSEFramework.framework/Info.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>RVPNSEFramework</string>
              <key>CFBundleIdentifier</key>
              <string>com.devstroop.rvpnse</string>
              <key>CFBundleName</key>
              <string>RVPNSEFramework</string>
              <key>CFBundlePackageType</key>
              <string>FMWK</string>
              <key>CFBundleShortVersionString</key>
              <string>${{ needs.setup.outputs.version }}</string>
              <key>CFBundleSupportedPlatforms</key>
              <array>
                  <string>iPhoneOS</string>
                  <string>iPhoneSimulator</string>
              </array>
          </dict>
          </plist>
          EOF
          
          # Package framework
          mkdir -p dist
          tar -czf dist/rvpnse-ios.tar.gz RVPNSEFramework.framework
          
          SIZE=$(du -h dist/rvpnse-ios.tar.gz | cut -f1)
          echo "‚úÖ Built iOS universal framework ($SIZE)"
          
          # Show framework info
          echo "üì± Framework details:"
          lipo -info RVPNSEFramework.framework/RVPNSEFramework

      - name: üì§ Upload iOS Framework
        uses: actions/upload-artifact@v4
        with:
          name: ios-universal
          path: dist/rvpnse-ios.tar.gz
          retention-days: 1

  # ============================================================================
  # üì± ANDROID BUNDLE - Universal Package
  # ============================================================================
  bundle-android:
    name: üì± Android Bundle
    needs: [setup, build-android]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: üì• Download Android libraries
        uses: actions/download-artifact@v4
        with:
          pattern: android-*
          path: android-libs

      - name: üì¶ Create Android Bundle
        run: |
          echo "üì¶ Creating Android universal bundle..."
          
          # Create Android directory structure
          mkdir -p android-bundle/{jniLibs/{arm64-v8a,armeabi-v7a,x86_64,x86},include}
          
          # Copy libraries to correct ABI directories
          find android-libs -name "*ARM64*" -exec cp {} android-bundle/jniLibs/arm64-v8a/librvpnse.so \; 2>/dev/null || echo "ARM64 not found"
          find android-libs -name "*ARMv7*" -exec cp {} android-bundle/jniLibs/armeabi-v7a/librvpnse.so \; 2>/dev/null || echo "ARMv7 not found"
          find android-libs -name "*x64*" -exec cp {} android-bundle/jniLibs/x86_64/librvpnse.so \; 2>/dev/null || echo "x64 not found"
          find android-libs -name "*x86*" -exec cp {} android-bundle/jniLibs/x86/librvpnse.so \; 2>/dev/null || echo "x86 not found"
          
          # Add integration files
          cp include/rvpnse.h android-bundle/include/
          
          # Create installation script
          cat > android-bundle/install.sh << 'EOF'
          #!/bin/bash
          # RVPNSE Android Integration Script
          
          set -e
          
          if [ -z "$1" ]; then
            echo "Usage: $0 <flutter-project-path>"
            echo "Example: $0 /path/to/my-flutter-app"
            exit 1
          fi
          
          PROJECT_PATH="$1"
          ANDROID_PATH="$PROJECT_PATH/android/app/src/main"
          
          if [ ! -d "$PROJECT_PATH" ]; then
            echo "‚ùå Error: Project path does not exist: $PROJECT_PATH"
            exit 1
          fi
          
          # Copy native libraries
          echo "üì± Installing Android native libraries..."
          mkdir -p "$ANDROID_PATH/jniLibs"
          cp -r jniLibs/* "$ANDROID_PATH/jniLibs/"
          
          # Copy headers for JNI
          mkdir -p "$PROJECT_PATH/android/app/src/main/cpp"
          cp include/rvpnse.h "$PROJECT_PATH/android/app/src/main/cpp/"
          
          echo "‚úÖ RVPNSE Android libraries installed successfully!"
          echo ""
          echo "üìã Installed libraries:"
          find "$ANDROID_PATH/jniLibs" -name "*.so" | while read lib; do
            abi=$(basename $(dirname "$lib"))
            size=$(du -h "$lib" | cut -f1)
            echo "  ‚Ä¢ $abi: librvpnse.so ($size)"
          done
          echo ""
          echo "üìù Next steps:"
          echo "   1. Add JNI bindings in your Dart code"
          echo "   2. Build your Flutter project: flutter build apk"
          echo "   3. See docs/integration/ for usage examples"
          EOF
          chmod +x android-bundle/install.sh
          
          # Create comprehensive README
          cat > android-bundle/README.md << EOF
          # RVPNSE Android Bundle
          
          Production-ready VPN library for Android applications.
          
          ## üöÄ Quick Installation
          \`\`\`bash
          ./install.sh /path/to/your/flutter/project
          \`\`\`
          
          ## üì± Supported ABIs
          - **arm64-v8a**: 64-bit ARM (most modern devices)
          - **armeabi-v7a**: 32-bit ARM (legacy devices)
          - **x86_64**: 64-bit Intel (emulators)
          - **x86**: 32-bit Intel (old emulators)
          
          ## üîß Manual Integration
          
          ### 1. Copy Libraries
          \`\`\`bash
          cp -r jniLibs/* android/app/src/main/jniLibs/
          \`\`\`
          
          ### 2. Add JNI Bindings
          \`\`\`dart
          // example/lib/rvpnse_bindings.dart
          import 'dart:ffi' as ffi;
          import 'dart:io';
          
          final dylib = Platform.isAndroid
            ? ffi.DynamicLibrary.open('librvpnse.so')
            : ffi.DynamicLibrary.process();
          \`\`\`
          
          ### 3. Build Project
          \`\`\`bash
          flutter build apk --release
          \`\`\`
          
          ## üìö Documentation
          - [Integration Guide](https://github.com/devstroop/rvpnse/tree/main/docs)
          - [API Reference](https://github.com/devstroop/rvpnse/blob/main/include/rvpnse.h)
          - [Examples](https://github.com/devstroop/rvpnse/tree/main/examples)
          
          ## üõ†Ô∏è Build Info
          - **Version**: ${{ needs.setup.outputs.version }}
          - **Built**: ${{ needs.setup.outputs.build_date }}
          - **Crypto**: AWS-LC-RS (optimized for Android)
          - **Min SDK**: 21 (Android 5.0)
          EOF
          
          # Create final bundle
          mkdir -p dist
          tar -czf dist/rvpnse-android.tar.gz -C android-bundle .
          
          SIZE=$(du -h dist/rvpnse-android.tar.gz | cut -f1)
          echo "‚úÖ Created Android universal bundle ($SIZE)"
          
          # Show bundle structure
          echo "üì¶ Bundle structure:"
          tar -tzf dist/rvpnse-android.tar.gz | head -20

      - name: üì§ Upload Android Bundle
        uses: actions/upload-artifact@v4
        with:
          name: android-bundle
          path: dist/rvpnse-android.tar.gz
          retention-days: 7

  # ============================================================================
  # üöÄ RELEASE PUBLICATION
  # ============================================================================
  publish:
    name: üöÄ Publish Release
    needs: [setup, build-desktop, build-ios, bundle-android]
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: üìä Generate build metrics
        run: |
          echo "## üìä Build Report" > metrics.md
          echo "" >> metrics.md
          echo "| Platform | Architecture | Size | Download |" >> metrics.md
          echo "|----------|-------------|------|----------|" >> metrics.md
          
          TOTAL_SIZE=0
          
          # Desktop libraries
          for file in release-artifacts/desktop-*/*; do
            if [[ -f "$file" ]]; then
              name=$(basename "$file")
              size_bytes=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file")
              size_mb=$((size_bytes / 1024 / 1024))
              TOTAL_SIZE=$((TOTAL_SIZE + size_bytes))
              platform=$(echo "$name" | sed 's/librvpnse-//' | sed 's/\..*//')
              echo "| Desktop | $platform | ${size_mb}MB | [$name](../../releases/download/${{ needs.setup.outputs.version }}/$name) |" >> metrics.md
            fi
          done
          
          # Mobile bundles
          if [[ -f "release-artifacts/android-bundle/rvpnse-android.tar.gz" ]]; then
            size_bytes=$(stat -c%s "release-artifacts/android-bundle/rvpnse-android.tar.gz" 2>/dev/null || stat -f%z "release-artifacts/android-bundle/rvpnse-android.tar.gz")
            size_mb=$((size_bytes / 1024 / 1024))
            TOTAL_SIZE=$((TOTAL_SIZE + size_bytes))
            echo "| Android | Universal | ${size_mb}MB | [rvpnse-android.tar.gz](../../releases/download/${{ needs.setup.outputs.version }}/rvpnse-android.tar.gz) |" >> metrics.md
          fi
          
          if [[ -f "release-artifacts/ios-universal/rvpnse-ios.tar.gz" ]]; then
            size_bytes=$(stat -c%s "release-artifacts/ios-universal/rvpnse-ios.tar.gz" 2>/dev/null || stat -f%z "release-artifacts/ios-universal/rvpnse-ios.tar.gz")
            size_mb=$((size_bytes / 1024 / 1024))
            TOTAL_SIZE=$((TOTAL_SIZE + size_bytes))
            echo "| iOS | Universal | ${size_mb}MB | [rvpnse-ios.tar.gz](../../releases/download/${{ needs.setup.outputs.version }}/rvpnse-ios.tar.gz) |" >> metrics.md
          fi
          
          TOTAL_MB=$((TOTAL_SIZE / 1024 / 1024))
          
          echo "" >> metrics.md
          echo "### üìà Release Summary" >> metrics.md
          echo "- **Total Size**: ${TOTAL_MB}MB" >> metrics.md
          echo "- **Build Date**: ${{ needs.setup.outputs.build_date }}" >> metrics.md
          echo "- **Rust Version**: ${{ env.RUST_VERSION }}" >> metrics.md
          echo "- **Desktop Crypto**: Ring (high performance)" >> metrics.md
          echo "- **Android Crypto**: AWS-LC-RS (enhanced compatibility)" >> metrics.md
          echo "- **iOS Crypto**: Ring (native performance)" >> metrics.md
          echo "" >> metrics.md
          echo "### üöÄ Installation" >> metrics.md
          echo "\`\`\`bash" >> metrics.md
          echo "# Download and extract for your platform" >> metrics.md
          echo "curl -L -O https://github.com/devstroop/rvpnse/releases/download/${{ needs.setup.outputs.version }}/[filename]" >> metrics.md
          echo "tar -xzf [filename]" >> metrics.md
          echo "\`\`\`" >> metrics.md

      - name: üöÄ Upload release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.setup.outputs.version }}"
          
          echo "üöÄ Uploading release assets for $VERSION..."
          
          # Upload desktop libraries
          for file in release-artifacts/desktop-*/*; do
            if [[ -f "$file" ]]; then
              echo "üì§ Uploading $(basename "$file")"
              gh release upload "$VERSION" "$file" --clobber
            fi
          done
          
          # Upload mobile bundles
          if [[ -f "release-artifacts/android-bundle/rvpnse-android.tar.gz" ]]; then
            echo "üì§ Uploading Android bundle"
            gh release upload "$VERSION" "release-artifacts/android-bundle/rvpnse-android.tar.gz" --clobber
          fi
          
          if [[ -f "release-artifacts/ios-universal/rvpnse-ios.tar.gz" ]]; then
            echo "üì§ Uploading iOS framework"
            gh release upload "$VERSION" "release-artifacts/ios-universal/rvpnse-ios.tar.gz" --clobber
          fi

      - name: üìù Update release notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release edit "${{ needs.setup.outputs.version }}" --notes-file metrics.md

      - name: üéâ Build summary
        run: |
          echo "## üéâ RVPNSE ${{ needs.setup.outputs.version }} Build Complete!"
          echo ""
          echo "### üì¶ Release Assets:"
          find release-artifacts -type f \( -name "*.so" -o -name "*.dll" -o -name "*.dylib" -o -name "*.tar.gz" \) | while read file; do
            size=$(du -h "$file" | cut -f1)
            echo "  ‚úÖ $(basename "$file") ($size)"
          done
          echo ""
          echo "### üîó Links:"
          echo "  üìã **Release**: https://github.com/${{ github.repository }}/releases/tag/${{ needs.setup.outputs.version }}"
          echo "  üìö **Docs**: https://github.com/${{ github.repository }}/tree/main/docs"
          echo "  üöÄ **Ready for production!**"
