# RVPNSE Production Build and Release
name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  pull-requests: read
  actions: read

env:
  CARGO_TERM_COLOR: always
  RUST_VERSION: '1.82.0'
  PYTHON_VERSION: '3.11'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # For manual dispatch, bump version
            CURRENT_VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "//' | sed 's/"//')
            case "${{ github.event.inputs.release_type }}" in
              major)
                NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print ($1+1)".0.0"}')
                ;;
              minor)
                NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."($2+1)".0"}')
                ;;
              patch)
                NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2"."($3+1)}')
                ;;
            esac
            echo "version=v$NEW_VERSION" >> $GITHUB_OUTPUT
            # Update Cargo.toml
            sed -i "s/version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" Cargo.toml
            
            # Configure git with GitHub token
            git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            
            # Commit and push changes
            git add Cargo.toml
            git commit -m "Bump version to $NEW_VERSION" || exit 0
            git tag "v$NEW_VERSION"
            git push origin HEAD:${{ github.ref_name }}
            git push origin "v$NEW_VERSION"
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ steps.get_version.outputs.version }}" \
            --title "RVPNSE ${{ steps.get_version.outputs.version }}" \
            --notes "## RVPNSE Release ${{ steps.get_version.outputs.version }}
            
            Production-ready VPN library with cross-platform support.
            
            ### Platforms
            - ✅ Linux x64
            - ✅ macOS x64 & arm64  
            - ✅ Windows x64
            - ✅ Android arm64/armv7/x64
            - ✅ iOS arm64/Simulator
            
            ### Features
            - 🦀 Production-ready Rust implementation
            - 🔒 Secure SoftEther SSL-VPN protocol
            - 🌍 Cross-platform C FFI interface
            - ⚡ Connection limits and rate limiting
            - 📱 Mobile-optimized implementations
            
            See the [documentation](https://github.com/devstroop/rvpnse/tree/main/docs) for integration guides." \
            --draft=false \
            --prerelease=false || true
          
          # Get the upload URL for artifacts
          UPLOAD_URL=$(gh api repos/${{ github.repository }}/releases/tags/${{ steps.get_version.outputs.version }} --jq '.upload_url')
          echo "upload_url=$UPLOAD_URL" >> $GITHUB_OUTPUT

  # ============================================================================
  # LINUX BUILDS - Multiple Architectures
  # ============================================================================
  build-linux:
    name: Linux ${{ matrix.arch }}
    needs: create-release
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - { arch: "x64", target: "x86_64-unknown-linux-gnu", features: "ring-crypto" }
          - { arch: "x86", target: "i686-unknown-linux-gnu", features: "ring-crypto" }
          - { arch: "arm64", target: "aarch64-unknown-linux-gnu", features: "ring-crypto" }
          - { arch: "armv7", target: "armv7-unknown-linux-gnueabihf", features: "ring-crypto" }
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config
          
          # Install cross-compilation tools for different architectures
          case "${{ matrix.target }}" in
            "i686-unknown-linux-gnu")
              sudo apt-get install -y gcc-multilib libc6-dev-i386
              ;;
            "aarch64-unknown-linux-gnu")
              sudo apt-get install -y gcc-aarch64-linux-gnu
              echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
              echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
              ;;
            "armv7-unknown-linux-gnueabihf")
              sudo apt-get install -y gcc-arm-linux-gnueabihf
              echo "CC_armv7_unknown_linux_gnueabihf=arm-linux-gnueabihf-gcc" >> $GITHUB_ENV
              echo "CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER=arm-linux-gnueabihf-gcc" >> $GITHUB_ENV
              ;;
          esac

      - name: Build Linux ${{ matrix.arch }}
        run: |
          echo "🔨 Building Linux ${{ matrix.arch }}..."
          cargo build --target ${{ matrix.target }} --release --features ${{ matrix.features }}
          
          mkdir -p dist
          cp target/${{ matrix.target }}/release/librvpnse.so dist/librvpnse-linux-${{ matrix.arch }}.so
          
          SIZE=$(du -h dist/librvpnse-linux-${{ matrix.arch }}.so | cut -f1)
          echo "✅ Built Linux ${{ matrix.arch }} library ($SIZE)"

      - name: Upload Linux ${{ matrix.arch }}
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.arch }}
          path: dist/

  # ============================================================================
  # WINDOWS BUILDS - Multiple Architectures  
  # ============================================================================
  build-windows:
    name: Windows ${{ matrix.arch }}
    needs: create-release
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - { arch: "x64", target: "x86_64-pc-windows-msvc", features: "ring-crypto" }
          - { arch: "x86", target: "i686-pc-windows-msvc", features: "ring-crypto" }
          - { arch: "arm64", target: "aarch64-pc-windows-msvc", features: "ring-crypto" }
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: ${{ matrix.target }}

      - name: Build Windows ${{ matrix.arch }}
        shell: bash
        run: |
          echo "🔨 Building Windows ${{ matrix.arch }}..."
          cargo build --target ${{ matrix.target }} --release --features ${{ matrix.features }}
          
          mkdir -p dist
          cp target/${{ matrix.target }}/release/rvpnse.dll dist/librvpnse-windows-${{ matrix.arch }}.dll
          
          SIZE=$(du -h dist/librvpnse-windows-${{ matrix.arch }}.dll | cut -f1)
          echo "✅ Built Windows ${{ matrix.arch }} library ($SIZE)"

      - name: Upload Windows ${{ matrix.arch }}
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.arch }}
          path: dist/

  # ============================================================================
  # MACOS BUILDS - Universal and Individual Architectures
  # ============================================================================
  build-macos:
    name: macOS ${{ matrix.arch }}
    needs: create-release
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - { arch: "x64", target: "x86_64-apple-darwin", features: "ring-crypto" }
          - { arch: "arm64", target: "aarch64-apple-darwin", features: "ring-crypto" }
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: ${{ matrix.target }}

      - name: Build macOS ${{ matrix.arch }}
        run: |
          echo "🔨 Building macOS ${{ matrix.arch }}..."
          cargo build --target ${{ matrix.target }} --release --features ${{ matrix.features }}
          
          mkdir -p dist
          cp target/${{ matrix.target }}/release/librvpnse.dylib dist/librvpnse-macos-${{ matrix.arch }}.dylib
          
          SIZE=$(du -h dist/librvpnse-macos-${{ matrix.arch }}.dylib | cut -f1)
          echo "✅ Built macOS ${{ matrix.arch }} library ($SIZE)"

      - name: Upload macOS ${{ matrix.arch }}
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}
          path: dist/

  # ============================================================================
  # ANDROID BUILDS - All ABIs with AWS-LC-RS
  # ============================================================================
  build-android:
    name: Android ${{ matrix.arch }}
    needs: create-release
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - { arch: "arm64", target: "aarch64-linux-android", rust_target: "aarch64-linux-android", abi: "arm64-v8a" }
          - { arch: "armv7", target: "armv7-linux-androideabi", rust_target: "armv7-linux-androideabi", abi: "armeabi-v7a" }
          - { arch: "x64", target: "x86_64-linux-android", rust_target: "x86_64-linux-android", abi: "x86_64" }
          - { arch: "x86", target: "i686-linux-android", rust_target: "i686-linux-android", abi: "x86" }
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt
          targets: ${{ matrix.rust_target }}

      - name: Install Android targets
        run: |
          rustup target add aarch64-linux-android
          rustup target add armv7-linux-androideabi
          rustup target add x86_64-linux-android
          rustup target add i686-linux-android

      - name: Set up Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25c
          add-to-path: false

      - name: Install Android build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libc6-dev-i386 clang llvm-dev libclang-dev

      - name: Setup Android environment
        run: |
          # The setup-ndk action sets ANDROID_NDK_LATEST_HOME
          export ANDROID_NDK_ROOT=${ANDROID_NDK_LATEST_HOME}
          echo "ANDROID_NDK_ROOT=${ANDROID_NDK_LATEST_HOME}" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=${ANDROID_NDK_LATEST_HOME}" >> $GITHUB_ENV
          
          # Verify NDK installation
          echo "NDK Root: ${ANDROID_NDK_LATEST_HOME}"
          ls -la "${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/"
          
          # Find the actual libclang path
          LIBCLANG_PATH=$(find /usr/lib -name "libclang*.so*" | head -n 1 | xargs dirname)
          if [ -z "$LIBCLANG_PATH" ]; then
            LIBCLANG_PATH="/usr/lib/x86_64-linux-gnu"
          fi
          echo "Found libclang at: $LIBCLANG_PATH"
          ls -la "$LIBCLANG_PATH"/libclang*
          
          # Set up bindgen environment 
          echo "BINDGEN_EXTRA_CLANG_ARGS=--sysroot=${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/sysroot -I${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include" >> $GITHUB_ENV
          echo "LIBCLANG_PATH=$LIBCLANG_PATH" >> $GITHUB_ENV
          echo "CLANG_PATH=${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang" >> $GITHUB_ENV
          
          # Use system clang for bindgen, NDK clang for compilation
          echo "CC_aarch64_linux_android=${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang" >> $GITHUB_ENV
          echo "CXX_aarch64_linux_android=${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang++" >> $GITHUB_ENV
          echo "AR_aarch64_linux_android=${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang" >> $GITHUB_ENV
          
          echo "CC_armv7_linux_androideabi=${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang" >> $GITHUB_ENV
          echo "CXX_armv7_linux_androideabi=${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang++" >> $GITHUB_ENV
          echo "AR_armv7_linux_androideabi=${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_ARMV7_LINUX_ANDROIDEABI_LINKER=${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang" >> $GITHUB_ENV
          
          echo "CC_x86_64_linux_android=${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android21-clang" >> $GITHUB_ENV
          echo "CXX_x86_64_linux_android=${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android21-clang++" >> $GITHUB_ENV
          echo "AR_x86_64_linux_android=${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_X86_64_LINUX_ANDROID_LINKER=${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android21-clang" >> $GITHUB_ENV
          
          echo "CC_i686_linux_android=${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android21-clang" >> $GITHUB_ENV
          echo "CXX_i686_linux_android=${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android21-clang++" >> $GITHUB_ENV
          echo "AR_i686_linux_android=${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_I686_LINUX_ANDROID_LINKER=${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android21-clang" >> $GITHUB_ENV
          
          # Set environment to use system tools for ring build
          echo "RING_PREGENERATE_ASM=0" >> $GITHUB_ENV

      - name: Build Android ${{ matrix.arch }}
        run: |
          # Build single Android target to avoid crypto library conflicts
          echo "🔨 Building Android ${{ matrix.arch }} (${{ matrix.rust_target }})..."
          
          # Comprehensive cleanup to avoid crypto library conflicts
          rm -rf target/
          rm -rf ~/.cargo/registry/src/*/ring-*
          rm -rf ~/.cargo/registry/src/*/aws-lc-*
          rm -rf ~/.cargo/git/checkouts/ring-*
          rm -rf ~/.cargo/git/checkouts/aws-lc-*
          cargo clean
          
          # Set environment variables for pure Rust crypto
          export CARGO_BUILD_JOBS=1
          export RUST_BACKTRACE=1
          
          # Use separate target directories to avoid conflicts
          export CARGO_TARGET_DIR="target-${{ matrix.rust_target }}"
          
          # Create minimal cargo config for this build
          mkdir -p .cargo
          cat > .cargo/config.toml << 'EOF'
          [build]
          jobs = 1
          EOF
          
          # Build with aws-lc-rs for Android (better cross-compilation support than ring)
          cargo build --target ${{ matrix.rust_target }} --release --no-default-features --features aws-lc-crypto
          
          # Copy built library to expected location for packaging
          mkdir -p dist/
          cp target-${{ matrix.rust_target }}/${{ matrix.rust_target }}/release/librvpnse.so dist/librvpnse-android-${{ matrix.arch }}.so
          
          SIZE=$(du -h dist/librvpnse-android-${{ matrix.arch }}.so | cut -f1)
          echo "✅ Built Android ${{ matrix.arch }} library ($SIZE)"

      - name: Upload Android ${{ matrix.arch }}
        uses: actions/upload-artifact@v4
        with:
          name: android-${{ matrix.arch }}
          path: dist/

  # ============================================================================
  # ANDROID BUNDLE - Combine All Android Libraries
  # ============================================================================
  combine-android:
    name: Android Bundle
    needs: build-android
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Download all Android artifacts
        uses: actions/download-artifact@v4
        with:
          path: android-artifacts
          pattern: android-*

      - name: Combine Android libraries
        run: |
          # Create combined Android bundle from individual artifacts
          echo "📦 Combining Android libraries..."
          mkdir -p dist
          
          # Copy all downloaded Android artifacts to dist/
          find android-artifacts -name "*.so" -exec cp {} dist/ \;
          
          # Create the Android bundle structure
          mkdir -p android-bundle/lib/arm64-v8a
          mkdir -p android-bundle/lib/armeabi-v7a
          mkdir -p android-bundle/lib/x86_64
          mkdir -p android-bundle/lib/x86
          
          # Copy libraries to correct Android architecture directories
          cp dist/librvpnse-android-arm64.so android-bundle/lib/arm64-v8a/librvpnse.so 2>/dev/null || echo "arm64 lib not found"
          cp dist/librvpnse-android-armv7.so android-bundle/lib/armeabi-v7a/librvpnse.so 2>/dev/null || echo "armv7 lib not found"
          cp dist/librvpnse-android-x64.so android-bundle/lib/x86_64/librvpnse.so 2>/dev/null || echo "x64 lib not found"
          cp dist/librvpnse-android-x86.so android-bundle/lib/x86/librvpnse.so 2>/dev/null || echo "x86 lib not found"
          
          # Create Android bundle
          tar -czf dist/rvpnse-android.tar.gz -C android-bundle .
          
          echo "✅ Android bundle created successfully!"
          ls -la dist/

      - name: Upload combined Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-bundle
          path: dist/rvpnse-android.tar.gz

  build-ios:
    name: Build iOS Libraries
    needs: create-release
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ios

      - name: Install iOS targets
        run: |
          rustup target add aarch64-apple-ios
          rustup target add x86_64-apple-ios
          rustup target add aarch64-apple-ios-sim

      - name: Build iOS libraries
        run: |
          python3 tools/build.py --mode release --all-ios --verbose

      - name: Upload iOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-libraries
          path: dist/rvpnse-ios.tar.gz

  # ============================================================================
  # 🚀 UPLOAD RELEASES - Create GitHub Release with All Artifacts
  # ============================================================================
  upload-releases:
    name: 🚀 Upload Releases
    needs: [build-linux, build-windows, build-macos, build-android, build-ios, combine-android]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Display downloaded artifacts
        run: |
          echo "📦 Downloaded artifacts:"
          find release-artifacts -type f -exec ls -la {} \;
          echo ""
          echo "📋 Artifact summary:"
          echo "Total files: $(find release-artifacts -type f | wc -l)"
          echo "Linux libraries: $(find release-artifacts -name "*linux*" | wc -l)"
          echo "Windows libraries: $(find release-artifacts -name "*windows*" | wc -l)"
          echo "macOS libraries: $(find release-artifacts -name "*macos*" | wc -l)"
          echo "Android libraries: $(find release-artifacts -name "*android*" | wc -l)"
          echo "iOS libraries: $(find release-artifacts -name "*ios*" | wc -l)"
          echo "Bundles: $(find release-artifacts -name "*.tar.gz" | wc -l)"

      - name: Create release notes
        id: release_notes
        run: |
          # Generate release notes
          echo "## 🎉 RVPNSE Release" >> release_notes.md
          echo "" >> release_notes.md
          echo "### 📋 Supported Platforms" >> release_notes.md
          echo "" >> release_notes.md
          echo "#### Linux" >> release_notes.md
          echo "- x86_64 (Intel/AMD 64-bit)" >> release_notes.md
          echo "- i686 (Intel/AMD 32-bit)" >> release_notes.md
          echo "- aarch64 (ARM 64-bit)" >> release_notes.md
          echo "- armv7 (ARM 32-bit)" >> release_notes.md
          echo "" >> release_notes.md
          echo "#### Windows" >> release_notes.md
          echo "- x86_64 (Intel/AMD 64-bit)" >> release_notes.md
          echo "- i686 (Intel/AMD 32-bit)" >> release_notes.md
          echo "- aarch64 (ARM 64-bit)" >> release_notes.md
          echo "" >> release_notes.md
          echo "#### macOS" >> release_notes.md
          echo "- x86_64 (Intel 64-bit)" >> release_notes.md
          echo "- aarch64 (Apple Silicon M1/M2)" >> release_notes.md
          echo "" >> release_notes.md
          echo "#### Android" >> release_notes.md
          echo "- arm64-v8a (ARM 64-bit)" >> release_notes.md
          echo "- armeabi-v7a (ARM 32-bit)" >> release_notes.md
          echo "- x86_64 (Intel 64-bit emulator)" >> release_notes.md
          echo "- x86 (Intel 32-bit emulator)" >> release_notes.md
          echo "" >> release_notes.md
          echo "#### iOS" >> release_notes.md
          echo "- Universal Framework (device + simulator)" >> release_notes.md
          echo "" >> release_notes.md
          echo "### 🔧 Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo "1. Download the appropriate library for your platform" >> release_notes.md
          echo "2. For mobile apps, use the combined bundles (android-bundle, ios-bundle)" >> release_notes.md
          echo "3. Include the header file \`rvpnse.h\` in your project" >> release_notes.md
          echo "" >> release_notes.md
          echo "### 📊 Build Information" >> release_notes.md
          echo "- Built with: Rust ${{ env.RUST_VERSION }}" >> release_notes.md
          echo "- Cryptography: AWS-LC-RS (Android) / Ring (other platforms)" >> release_notes.md
          echo "- Build Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> release_notes.md
          echo "- Commit: ${{ github.sha }}" >> release_notes.md

      - name: Collect release files
        run: |
          # Prepare all files for release
          mkdir -p release-files
          
          # Copy all artifacts to release directory with proper naming
          find release-artifacts -name "*.so" -exec cp {} release-files/ \;
          find release-artifacts -name "*.dll" -exec cp {} release-files/ \;
          find release-artifacts -name "*.dylib" -exec cp {} release-files/ \;
          find release-artifacts -name "*.tar.gz" -exec cp {} release-files/ \;
          find release-artifacts -name "*.framework.tar.gz" -exec cp {} release-files/ \;
          
          # Copy header file
          cp include/rvpnse.h release-files/
          
          echo "📋 Final release files:"
          ls -la release-files/

      - name: Verify release exists
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.create-release.outputs.version }}"
          echo "🔍 Verifying release exists: $VERSION"
          
          # Check if release exists, if not create it
          if ! gh release view "$VERSION" >/dev/null 2>&1; then
            echo "⚠️  Release $VERSION not found, creating it..."
            gh release create "$VERSION" \
              --title "RVPNSE $VERSION" \
              --notes "Release $VERSION - Artifacts will be uploaded shortly..." \
              --draft=false \
              --prerelease=false
          else
            echo "✅ Release $VERSION exists"
          fi
          
          gh release view "$VERSION"

      - name: Upload to GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the version from the create-release job
          VERSION="${{ needs.create-release.outputs.version }}"
          echo "📤 Uploading artifacts to release: $VERSION"
          
          # Check if we have any files to upload
          if [ ! -d "release-files" ] || [ -z "$(ls -A release-files)" ]; then
            echo "❌ No release files found in release-files directory!"
            ls -la release-files/ || echo "Directory doesn't exist"
            exit 1
          fi
          
          echo "📁 Files to upload:"
          ls -la release-files/
          
          # Upload all release files to the existing release
          UPLOAD_COUNT=0
          for file in release-files/*; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "⬆️  Uploading: $filename ($(du -h "$file" | cut -f1))"
              
              # Try to upload with retries
              RETRY=0
              MAX_RETRIES=3
              while [ $RETRY -lt $MAX_RETRIES ]; do
                if gh release upload "$VERSION" "$file" --clobber; then
                  echo "✅ Successfully uploaded: $filename"
                  UPLOAD_COUNT=$((UPLOAD_COUNT + 1))
                  break
                else
                  RETRY=$((RETRY + 1))
                  echo "⚠️  Upload failed for $filename (attempt $RETRY/$MAX_RETRIES)"
                  if [ $RETRY -lt $MAX_RETRIES ]; then
                    echo "🔄 Retrying in 5 seconds..."
                    sleep 5
                  fi
                fi
              done
              
              if [ $RETRY -eq $MAX_RETRIES ]; then
                echo "❌ Failed to upload $filename after $MAX_RETRIES attempts"
                exit 1
              fi
            fi
          done
          
          # Update release notes
          echo "📝 Updating release notes..."
          gh release edit "$VERSION" --notes-file release_notes.md
          
          echo "✅ Successfully uploaded $UPLOAD_COUNT files!"
          echo "🎉 Release complete!"
          gh release view "$VERSION"


